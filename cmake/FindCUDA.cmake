# - Find CUDA
# This module looks for CUDA (NVIDIA compiler) support
# Sets:
# CUDA_INCLUDE_DIR  = where CUDA headers can be found
# CUDA_LIBRARY      = the library to link against
# CF_HAVE_CUDA      = set to true after finding the library
#

SET_TRIAL_INCLUDE_PATH ("") # clear include search path
SET_TRIAL_LIBRARY_PATH ("") # clear library search path

# try in user defined paths first
ADD_TRIAL_INCLUDE_PATH( ${CUDA_HOME}/include )
ADD_TRIAL_INCLUDE_PATH( ${CUDA_HOME}/include/crt )
ADD_TRIAL_INCLUDE_PATH( ${CUDA_HOME}/include/CL )
ADD_TRIAL_INCLUDE_PATH( $ENV{CUDA_HOME}/include )
ADD_TRIAL_INCLUDE_PATH( $ENV{CUDA_HOME}/include/crt )
ADD_TRIAL_INCLUDE_PATH( $ENV{CUDA_HOME}/include/CL )

#FIND_PATH(CUDA_INCLUDE_DIR
#          NAMES device_runtime.h
#          PATHS ${TRIAL_INCLUDE_PATHS} )

FIND_PATH(CUDA_INCLUDE_DIR
          NAMES cuda_runtime.h
          PATHS ${TRIAL_INCLUDE_PATHS} )

ADD_TRIAL_LIBRARY_PATH( /usr/lib64/nvidia )
ADD_TRIAL_LIBRARY_PATH( /usr/lib64 )
ADD_TRIAL_LIBRARY_PATH(${CUDA_HOME}/lib64 )
ADD_TRIAL_LIBRARY_PATH($ENV{CUDA_HOME}/lib64 )
ADD_TRIAL_LIBRARY_PATH( /usr/lib/nvidia )
ADD_TRIAL_LIBRARY_PATH(${CUDA_HOME}/lib )
ADD_TRIAL_LIBRARY_PATH($ENV{CUDA_HOME}/lib )

FIND_LIBRARY(CUDA_LIBRARY
             NAMES cuda
             PATHS ${TRIAL_LIBRARY_PATHS} )
FIND_LIBRARY(CUDART_LIBRARY
             NAMES cudart
             PATHS ${TRIAL_LIBRARY_PATHS} )
FIND_LIBRARY(CUBLAS_LIBRARY
             NAMES cublas
             PATHS ${TRIAL_LIBRARY_PATHS} )
FIND_LIBRARY(CUFFT_LIBRARY
             NAMES cufft
             PATHS ${TRIAL_LIBRARY_PATHS} )
FIND_LIBRARY(CURAND_LIBRARY
             NAMES curand
             PATHS ${TRIAL_LIBRARY_PATHS} )
FIND_LIBRARY(CUSPARSE_LIBRARY
             NAMES cusparse
             PATHS ${TRIAL_LIBRARY_PATHS} )

IF ( CUDA_LIBRARY )
  LIST ( APPEND CUDA_LIBRARIES ${CUDA_LIBRARY} )
ENDIF()
IF ( CUDART_LIBRARY )
  LIST ( APPEND CUDA_LIBRARIES ${CUDART_LIBRARY} )
ENDIF()
IF ( CUBLAS_LIBRARY )
  LIST ( APPEND CUDA_LIBRARIES ${CUBLAS_LIBRARY} )
ENDIF()
IF ( CUFFT_LIBRARY )
  LIST ( APPEND CUDA_LIBRARIES ${CUFFT_LIBRARY} )
ENDIF()
IF ( CURAND_LIBRARY )
  LIST ( APPEND CUDA_LIBRARIES ${CURAND_LIBRARY} )
ENDIF()
IF ( CUSPARSE_LIBRARY )
  LIST ( APPEND CUDA_LIBRARIES ${CUSPARSE_LIBRARY} )
ENDIF()

IF ( CUDA_INCLUDE_DIR AND CUDART_LIBRARY OR CUDA_LIBRARY )
  SET(CF_HAVE_CUDA 1 CACHE BOOL "Found CUDA library")
ELSE()
  SET(CF_HAVE_CUDA 0 CACHE BOOL "Not fount CUDA library")
ENDIF()

MARK_AS_ADVANCED(
  CUDA_INCLUDE_DIR
  CUDART_LIBRARY
  CUBLAS_LIBRARY
  CUFFT_LIBRARY
  CURAND_LIBRARY 
  CUSPARSE_LIBRARY
  CUDA_LIBRARIES
  CF_HAVE_CUDA
)

IF ( CUDA_LIBRARY )
MARK_AS_ADVANCED(
  CUDA_LIBRARY
)
ENDIF()

LOG ( "CF_HAVE_CUDA: [${CF_HAVE_CUDA}]" )
IF( CF_HAVE_CUDA )
LOG ( "  CUDA_INCLUDE_DIR   : [${CUDA_INCLUDE_DIR}]" )
LOG ( "  CUDA_LIBRARY        : [${CUDA_LIBRARY}]" )
LOG ( "  CUDART_LIBRARY      : [${CUDART_LIBRARY}]" )
LOG ( "  CUBLAS_LIBRARY      : [${CUBLAS_LIBRARY}]" )
LOG ( "  CUFFT_LIBRARY       : [${CUFFT_LIBRARY}]" )
LOG ( "  CUSPARSE_LIBRARY    : [${CUSPARSE_LIBRARY}]" )
LOG ( "  CUDA_LIBRARIES      : [${CUDA_LIBRARIES}]" )
ELSE()
LOGFILE ( "  CUDA_INCLUDE_DIR   : [${CUDA_INCLUDE_DIR}]" )
LOGFILE ( "  CUDA_LIBRARY        : [${CUDA_LIBRARY}]" )
LOGFILE ( "  CUDART_LIBRARY      : [${CUDART_LIBRARY}]" )
LOGFILE ( "  CUBLAS_LIBRARY      : [${CUBLAS_LIBRARY}]" )
LOGFILE ( "  CUFFT_LIBRARY       : [${CUFFT_LIBRARY}]" )
LOGFILE ( "  CUSPARSE_LIBRARY    : [${CUSPARSE_LIBRARY}]" )
LOGFILE ( "  CUDA_LIBRARIES      : [${CUDA_LIBRARIES}]" )
ENDIF()

