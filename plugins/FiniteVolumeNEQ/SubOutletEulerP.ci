#include "Framework/MultiScalarTerm.hh"
#include "Framework/PhysicalChemicalLibrary.hh"
#include "NavierStokes/MultiScalarVarSet.hh"

#include <algorithm>

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <typename UPDATEVAR>
void SubOutletEulerP<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFreal >("P","outlet pressure");
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename UPDATEVAR>
SubOutletEulerP<UPDATEVAR>::SubOutletEulerP(const std::string& name) :
  FVMCC_BC(name),
  _varSet(CFNULL),
  _library(CFNULL),
  _stateHasPartialDensities(true),
  _dataInnerState(),
  _mm(),
  _RTYovM()
{
  addConfigOptionsTo(this);
  
  _pOut = 0.0;
  setParameter("P",&_pOut); 
}

//////////////////////////////////////////////////////////////////////////////

template <typename UPDATEVAR>
SubOutletEulerP<UPDATEVAR>::~SubOutletEulerP()
{
}

//////////////////////////////////////////////////////////////////////////////

template <typename UPDATEVAR>
void SubOutletEulerP<UPDATEVAR>::setGhostState(Framework::GeometricEntity *const face)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Physics::NavierStokes;
  
  State& innerState = *face->getState(0);
  State& ghostState = *face->getState(1);
  
  // set the physical data starting from the inner state
  _varSet->computePhysicalData(innerState, _dataInnerState);
    
  // assumption here: second temperature is electron temperature
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  const CFuint nbSpecies = _varSet->getModel()->getNbScalarVars(0);
  const CFreal tInner = _dataInnerState[UPDATEVAR::PTERM::T];
  CFreal Te = tInner; 
  
  // roto-translational temperature
  ghostState[nbSpecies + dim] = tInner;
  
  
  /* Multi Temperatures
     ------------------- */
  const CFuint nbTv = this->_varSet->getModel()->getNbScalarVars(1);
  if (nbTv > 0) { 
    const CFuint startTv = nbSpecies+dim+1;
    if (this->_library->presenceElectron()) {
      Te = innerState[startTv];
      if (this->_library->getNbTe() == 1) {
	Te = innerState[nbSpecies+dim+nbTv]; // Te is always the last temperature
      }
    }
    for (CFuint k = 0; k < nbTv; ++k) {
      ghostState[startTv+k] = innerState[startTv+k]; 
    }
  }
    
 
  const CFuint firstSpecies = _varSet->getModel()->getFirstScalarVar(0);
  for (CFuint is = 0; is < nbSpecies; ++is) {
    const CFreal Ti = (is > 0) ? tInner : Te;
    _RTYovM[is] = _library->getRgas()*Ti*_dataInnerState[firstSpecies + is]/_mm[is];
  }
    
  // ghost state pressure: linear extrapolation is used
  const CFreal pInf = _varSet->getModel()->getPressInf();
  const CFreal pGhost = 2.0*_pOut - _dataInnerState[UPDATEVAR::PTERM::P];
  const CFreal rhoGhost = (pGhost + pInf)/_RTYovM.sum();
  
  if (_stateHasPartialDensities) {
    CFreal ysum = 0.;
    for (CFuint is = 0; is < nbSpecies; ++is) {
      const CFreal yi = _dataInnerState[firstSpecies + is];
      ghostState[is] = rhoGhost*yi; // rho_i = rho*y_i 
      ysum += yi;
    }
    cf_assert(ysum > 0.99999 && ysum < 1.0001);
  } 
  else {
    for (CFuint is = 0; is < nbSpecies; ++is) {
      ghostState[is] = rhoGhost*this->_RTYovM[is]; // p_i = rho*R*T*y_i/M_i
    }
  }
  
  const CFuint rest = dim + 1 + nbTv;
  for (CFuint is = 0; is < rest; ++is) {
    ghostState[nbSpecies+is] = innerState[nbSpecies+is];
  } 
  
  CFLog(DEBUG_MAX, "SubOutletEulerP::setGhostState() => rho_i u v T Tv ER EI = " << ghostState << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <typename UPDATEVAR>
void SubOutletEulerP<UPDATEVAR>::setup()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Physics::NavierStokes;
  
  FVMCC_BC::setup();
  
  _varSet = getMethodData().getUpdateVar().template d_castTo<MultiScalarVarSet<UPDATEVAR> >();
  _varSet->getModel()->resizePhysicalData(_dataInnerState);
  
  const CFuint nbSpecies = _varSet->getModel()->getNbScalarVars(0);
  _mm.resize(nbSpecies);
  _pOut/=_varSet->getModel()->getPressRef();
  _RTYovM.resize(nbSpecies);
  
  _library = PhysicalModelStack::getActive()->getImplementor()->
    getPhysicalPropertyLibrary<PhysicalChemicalLibrary>();
  assert(_library.isNotNull());
  // species molar masses
  _library->getMolarMasses(_mm); 
  
  const vector<string>& varNames = _varSet->getVarNames();
  if ((int) std::count(varNames.begin(), varNames.end(), "rho0") > 0) {
    _stateHasPartialDensities = true;
  }
  else if ((int) std::count(varNames.begin(), varNames.end(), "p0") > 0) {
    _stateHasPartialDensities = false;
  }
  else {
    cout << "SubOutletEulerP::setup() => ERROR: no partial densities / pressures found!" << endl; abort();
  }
}
      
//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD
